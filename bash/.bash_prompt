#!/usr/bin/env bash

# who am I
printf 'Running %s\n' "$BASH_SOURCE"

# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch of the current git/mercurial repository and it's status
#    * the return value of the previous command
#    * newline
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        source ~/.bash_prompt


# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
     PURPLE="\[\033[0;35m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

 # Unicode symbols
 PS_SYMBOL_DARWIN=''
 PS_SYMBOL_LINUX='$'
 PS_SYMBOL_OTHER='%'
 GIT_BRANCH_SYMBOL='⑂ '
 GIT_BRANCH_CHANGED_SYMBOL='+'
 GIT_NEED_PUSH_SYMBOL='⇡'
 GIT_NEED_PULL_SYMBOL='⇣'

# determine git branch name and status
__git_info() {
    [ -x "$(which git)" ] || return    # git not found

    local git_eng="env LANG=C git"   # force git output in English to make our work easier
    # get current branch name or short SHA1 hash for detached head
    local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
    [ -n "$branch" ] || return  # git branch not found

    local marks

    # branch is modified?
    [ -n "$($git_eng status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

    # how many commits local branch is ahead/behind of remote?
    local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
    local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
    local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
    [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
    [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

    # print the git branch segment without a trailing newline
    printf "$GIT_BRANCH_SYMBOL$branch$marks"
}

# determine mercurial branch name
function parse_hg_branch(){
  hg branch 2> /dev/null | awk '{print " (" $1 ")"}'
}

# Determine the branch/state information for this git repository.
function set_repo() {
  # Get the name of the branch.
  #branch=$(parse_git_branch)
  branch=$(__git_info)
  # if not git then maybe mercurial
  if [ "$branch" == "" ]
  then
    branch=$(parse_hg_branch)
  fi

  # Set the final branch string.
  if [ "$branch" == "" ]
  then
    REPO=""
  else
    REPO="${PURPLE}(${branch})${COLOR_NONE} "
  fi
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\$"
  else
      PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
  fi
}

function set_ps_symbol () {
  if [[ -z "$PS_SYMBOL" ]]; then
    if test $1 -eq 0 ; then
        PS_SYMBOL="${LIGHT_GRAY}"
    else
        PS_SYMBOL="${LIGHT_RED}"
    fi
    case "$(uname)" in
      Darwin)
          PS_SYMBOL+=$PS_SYMBOL_DARWIN
          ;;
      Linux)
          PS_SYMBOL+=$PS_SYMBOL_LINUX
          ;;
      *)
          PS_SYMBOL+=$PS_SYMBOL_OTHER
    esac
    PS_SYMBOL+="${COLOR_NONE}"
  fi
}

function set_user () {
  if test "$USER" = "$DEFAULT_USER"; then
    USR_BASH=""
  else
    USR_BASH="${GREEN}${USER}@${HOST}${COLOR_NONE}:"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
  fi
}

function set_path () {
  CURRENT_PATH="${YELLOW}\w${COLOR_NONE} "
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_ps_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the user variable
  set_user

  # Set the path variable
  set_path

  # set the repository variable
  set_repo

  # Set the bash prompt variable.
  PS1="
${PYTHON_VIRTUALENV}${USR_BASH}${CURRENT_PATH}${REPO}
${PS_SYMBOL}> "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
